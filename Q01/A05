# q05_oop_all_in_one.py

# TODO (combined OOP exercise):
# Build a small library domain:
# 1) Class Price(value: float, currency: str="INR")
#    - __post_init__ style validation in __init__
#    - __repr__/__str__ to show "INR 499.00"
# 2) Class Book(title, author, price: Price)
#    - __eq__ compares title+author
#    - classmethod from_dict(d: dict) -> Book
# 3) Class Inventory:
#    - holds books (composition) in a list
#    - add_book(book), remove_book(title, author)
#    - find_by_author(author) -> list[Book]
#    - __len__ returns count, __iter__ yields books
# Demo:
# - Create 3 books via from_dict, add to inventory, print all (uses __str__)
# - Remove one, print length, print books by a specific author.


class Price:
    def __init__(self, value: float, currency: str = "INR"):
        if not isinstance(value, (int, float)) or value < 0:
            raise ValueError("Price must be a non-negative number")
        self.value = float(value)
        self.currency = currency

    def __repr__(self) -> str:
        return f"{self.currency} {self.value:.2f}"

    __str__ = __repr__  # make str same as repr


class Book:
    def __init__(self, title: str, author: str, price: Price):
        self.title = title
        self.author = author
        self.price = price

    def __eq__(self, other) -> bool:
        if isinstance(other, Book):
            return (self.title, self.author) == (other.title, other.author)
        return False

    def __repr__(self) -> str:
        return f"Book(title='{self.title}', author='{self.author}', price={self.price})"

    def __str__(self) -> str:
        return f"'{self.title}' by {self.author} - {self.price}"

    @classmethod
    def from_dict(cls, d: dict):
        return cls(d["title"], d["author"], Price(d["price"], d.get("currency", "INR")))


class Inventory:
    def __init__(self):
        self.books = []

    def add_book(self, book: Book):
        self.books.append(book)

    def remove_book(self, title: str, author: str):
        self.books = [b for b in self.books if not (b.title == title and b.author == author)]

    def find_by_author(self, author: str):
        return [b for b in self.books if b.author == author]

    def __len__(self):
        return len(self.books)

    def __iter__(self):
        return iter(self.books)


if __name__ == "__main__":
    # demo
    data = [
        {"title": "The Alchemist", "author": "Paulo Coelho", "price": 299},
        {"title": "Atomic Habits", "author": "James Clear", "price": 499},
        {"title": "Clean Code", "author": "Robert C. Martin", "price": 899},
    ]

    inventory = Inventory()

    # create books via from_dict
    for d in data:
        book = Book.from_dict(d)
        inventory.add_book(book)

    # print all books
    print("ðŸ“š Inventory:")
    for b in inventory:
        print(" -", b)

    # remove one
    inventory.remove_book("Atomic Habits", "James Clear")

    print("\nAfter removal, total books:", len(inventory))

    # find books by author
    author_books = inventory.find_by_author("Paulo Coelho")
    print("\nBooks by Paulo Coelho:")
    for b in author_books:
        print(" -", b)
